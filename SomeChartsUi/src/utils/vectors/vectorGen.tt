<#@ template language="C#v3.5" #>
<#@ import namespace="System.Text"#>
<#@ import namespace="System.Collections"#>
<#@ import namespace="System.Collections.Generic"#>
<#@ assembly name="System.Core"#>
<#@ import namespace="System.Linq"#>
<#
char[] axisNames = {'x', 'y', 'z', 'w'};
int[] axisCount = {2, 3, 4};
int runCount = axisCount.Length;
#>
/* GENERATED USING T4 */

// ReSharper disable CompareOfFloatsByEqualityOperator
// ReSharper disable IdentifierTypo
// ReSharper disable MemberCanBePrivate.Global
using SomeChartsUi.themes.colors;
namespace SomeChartsUi.utils.vectors;

<#
for (int iter = 0; iter < runCount; iter++) {
    string vecName = $"float{axisCount[iter]}";
    int aCount = axisCount[iter];
    char[] curAxis = axisNames.Take(aCount).ToArray();
#>
public struct <#=vecName#> {
#region staticFields

    public static readonly <#=vecName#> zero = new(0);
    public static readonly <#=vecName#> one = new(1);
    public static readonly <#=vecName#> maxValue = new(float.MaxValue);
    public static readonly <#=vecName#> minValue = new(float.MinValue);

#endregion staticFields

#region axis

<#
    // enter axis field and property gen
    for (int i = 0; i < aCount; i++) {
        char axis0 = axisNames[i];
 #>
    // <#=axis0#> axis
    public float <#=axis0#>;
<#
        for (int j = 0; j < aCount; j++) {
            char axis1 = axisNames[j];
#>
    public float2 <#=axis0#><#=axis1#> => new(<#=axis0#>,<#=axis1#>);
<#
            for (int k = 0; k < aCount; k++) {
                char axis2 = axisNames[k];
#>
    public float3 <#=axis0#><#=axis1#><#=axis2#> => new(<#=axis0#>,<#=axis1#>,<#=axis2#>);
<#
                for (int l = 0; l < aCount; l++) {
                    char axis3 = axisNames[l];
#>
    public float4 <#= axis0 #><#= axis1 #><#= axis2 #><#= axis3 #> => new(<#= axis0 #>,<#= axis1 #>,<#= axis2 #>,<#= axis3 #>);
<#
    // exit axis field and property gen
                }
            }
        }
    }
#>

#endregion axis

#region constructors
    
    public <#=vecName#>(<#=string.Join(", ", axisNames.Take(aCount).Select(v => $"float {v}"))#>) {
        <#=string.Join("\n        ", axisNames.Take(aCount).Select(v => $"this.{v} = {v};"))#>
    }
    public <#=vecName#>(float v) : this(<#=string.Join(", ", axisNames.Take(aCount).Select(_ => "v"))#>) {}

#endregion constructors

#region functions

    public float lengthSq => <#=string.Join(" + ", curAxis.Select(v => $"{v}*{v}"))#>;
    public float length => math.sqrt(lengthSq);

    public float sum => <#=string.Join(" + ", curAxis)#>;
    public float mul => <#=string.Join(" * ", curAxis)#>;
    public float avg => sum * <#=1f / aCount#>f;
    public float min => math.min(<#=string.Join(", ", curAxis)#>);
    public float max => math.max(<#=string.Join(", ", curAxis)#>);

    public <#= vecName #> normalized { get { float len = 1 / length; return this * len; } }

    public <#= vecName #> WithLength(float l) { float len = l / length; return this * len; }

<#
    for (int i = 0; i < aCount; i++) {
        char axis0 = axisNames[i];
#>
    public void Flip<#=axis0.ToString().ToUpper()#>() => <#=axis0#> = -<#=axis0#>;
<#
    }
#>

#endregion functions

#region operators

<#
    string[] binaryOperators = {"+", "-", "*", "/"};
    foreach (string op in binaryOperators) {
#>
    // binary operator '<#=op#>'
    public static <#= vecName #> operator <#=op#>(<#= vecName #> a, <#= vecName #> b) => new(<#= string.Join(", ", curAxis.Select(v => $"a.{v} {op} b.{v}")) #>);
    public static <#= vecName #> operator <#=op#>(float a, <#= vecName #> b) => new(<#= string.Join(", ", curAxis.Select(v => $"a {op} b.{v}")) #>);
    public static <#= vecName #> operator <#=op#>(<#= vecName #> a, float b) => new(<#= string.Join(", ", curAxis.Select(v => $"a.{v} {op} b")) #>);
<#
    }
    (string s, string concatOp)[] eqOperators = {
        ("==", "&&"),
        ("!=", "||"),
        (">", "&&"),
        (">=", "&&"),
        ("<", "&&"),
        ("<=", "&&"),
    };
    foreach ((string op, string concatOp) in eqOperators) {
#>
    // equality operator '<#=op#>'
    public static bool operator <#=op#>(<#= vecName #> a, <#= vecName #> b) => <#= string.Join($" {concatOp} ", curAxis.Select(v => $"a.{v} {op} b.{v}")) #>;
    public static bool operator <#=op#>(float a, <#= vecName #> b) => <#= string.Join($" {concatOp} ", curAxis.Select(v => $"a {op} b.{v}")) #>;
    public static bool operator <#=op#>(<#= vecName #> a, float b) => <#= string.Join($" {concatOp} ", curAxis.Select(v => $"a.{v} {op} b")) #>;
<#
    }
#>
    // other operators
    public static <#= vecName #> operator -(<#= vecName #> a) => new(<#= string.Join($", ", curAxis.Select(v => $"-a.{v}")) #>);
    public static implicit operator <#= vecName #>(float v) => new(v);
    public static implicit operator <#= vecName #>(int v) => new(v);

#endregion operators

#region staticFunc

    public static <#= vecName #> Min(<#= vecName #> a, <#= vecName #> b) => new(<#= string.Join(", ", curAxis.Select(v => $"math.min(a.{v}, b.{v})")) #>);
    public static <#= vecName #> Min(<#= vecName #> a, <#= vecName #> b, <#= vecName #> c) => new(<#= string.Join(", ", curAxis.Select(v => $"math.min(a.{v}, b.{v}, c.{v})")) #>);
    public static <#= vecName #> Min(<#= vecName #> a, <#= vecName #> b, <#= vecName #> c, <#= vecName #> d) => new(<#= string.Join(", ", curAxis.Select(v => $"math.min(a.{v}, b.{v}, c.{v}, d.{v})")) #>);

    public static <#= vecName #> Max(<#= vecName #> a, <#= vecName #> b) => new(<#= string.Join(", ", curAxis.Select(v => $"math.max(a.{v}, b.{v})")) #>);
    public static <#= vecName #> Max(<#= vecName #> a, <#= vecName #> b, <#= vecName #> c) => new(<#= string.Join(", ", curAxis.Select(v => $"math.max(a.{v}, b.{v}, c.{v})")) #>);
    public static <#= vecName #> Max(<#= vecName #> a, <#= vecName #> b, <#= vecName #> c, <#= vecName #> d) => new(<#= string.Join(", ", curAxis.Select(v => $"math.max(a.{v}, b.{v}, c.{v}, d.{v})")) #>);

    public static <#= vecName #> Clamp(<#= vecName #> v, <#= vecName #> min, <#= vecName #> max) => Max(Min(v, max), min);

#endregion staticFunc

#region impl

    public bool Equals(<#= vecName #> other) => <#= string.Join(" && ", curAxis.Select(v => $"{v} == other.{v}")) #>;
	public override bool Equals(object? obj) => obj is <#= vecName #> other && Equals(other);
	public override int GetHashCode() => HashCode.Combine(<#= string.Join(", ", curAxis) #>);

	public override string ToString() => $"(<#= string.Join(",", curAxis.Select(v => $"{{{v}}}")) #>)";

#endregion impl

#region other

<#
    switch (aCount) {
        case 2:{
#>
    public static float2 SinCos(float radians, float length) => new(MathF.Sin(radians) * length, MathF.Cos(radians) * length);
<#
            break;
        }
        case 3:{
#>
    public static implicit operator <#= vecName #>(color v) => new(v.rF, v.gF, v.bF);
    public static implicit operator color(<#= vecName #> v) => new(v.x, v.y, v.z);
<#
            break;
        }
        case 4:{
#>
    public static implicit operator <#= vecName #>(color v) => new(v.rF, v.gF, v.bF, v.aF);
    public static implicit operator color(<#= vecName #> v) => new(v.x, v.y, v.z, v.w);
<#
            break;
        }
    }
#>


#endregion other
}
<#
    }
#>